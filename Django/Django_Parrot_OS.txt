
#--creating an environment
python3 -m venv venv

#--environment activation
source venv/bin/activate

#--installation django--
pip install Django==3.2.16

#--Django installation confirmation--
django-admin --version

#--upgrade pip--
python3 -m pip install --upgrade pip

#--project creation--
django-admin startproject 'name project'

#--view commands--
python3 manage.py --help

#-- running the server --
python3 manage.py runserver

#--installad packages-- 
pip freeze
pip freeze > requirements.txt

#--app creation--
python3 manage.py startapp 'app name'
./manage.py startapp 'producrts'

#--install Pillow--
python3 -m pip install Pillow
#--django-mptt--
pip install django-mptt


#--migration(s) part 1--
python3 manage.py makemigrations
./manage.py makemigrations
#--migration(s) part 2--
python3 manage.py migrate
./manage.py migrate

#--settings.py--
#--static--
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

#--statics work--

{% load static %}

<link href="{% static 'vendor/img/favicon.png' %}" rel="icon">


#--base.html--

{% load static %}

{% block joke %} {% endblock %}

{% block content %} {% endblock %}

{% block footer %} {% endblock %}

#--idex.html--

{% extends 'products/base.html' %}
{% load static %}

{% block content %}

{% endblock %}

{% for post in post_list %}
 {% endfor %}

#--ipython and shell_plus--
pip install django-extensions
pip install ipython
идем в settings.py ->  INSTALLED_APPS и добавляем приложение django_extensions

запускаем через ./manage.py shell_plus
django-extensions - автоматически импортирует нужные нам модели и классы(например, ProductCategory, Product и другие, о которых узнаете позже)

ipyhton - для удобства использования терминала, дает возможность вводить команды clear, cd, pwd не открывая новый
./manage.py shell_plus
python3 manage.py shell_plus

User.objects.all()
User.objects.last().first_name
User.objects.last().password
User.objects.last().delete()





from products.models import ProductCategory

#-- User creation --
python3 manage.py createsuperuser
./manage.py createsuperuser

#-- Saving and loading environment dependencies --

pip freeze > requirements.txt
pip install -r requirements.txt

#--dumpdata--
python3 manage.py dumpdata products.ProductCategory > categories.json
./manage.py dumpdata products.ProductCategory > categories.json

./manage.py dumpdata products.Product > goods.json

#--loaddate from fixtures
python3 manage.py loaddata products/fixtures/categories.json
./manage.py loaddata products/fixtures/categories.json

python3 manage.py loaddata products/fixtures/goods.json
./manage.py loaddata products/fixtures/goods.json

#--app users creation--
python3 manage.py startapp users
./manage.py startapp users



#--Linters and formatters
pip install flake8 isort
flake8 .
isort .









Развертывание Джанго
sudo apt install python3-virtualenv

virtualenv venv -p python3
source venv/bin/activate # Активировать окружение

pip install django
pip install --upgrade pip


pip freeze > requirements.txt
django-admin startproject main .
django-admin startapp #authentication Название приложения


python manage.py  #Справка

Миграция:

python manage.py migrate

Создание супер пользователя

python manage.py createsuperuser

# Запуск сервера

python manage.py runserver  

Установить django - pip install django

Обновить pip  -  pip install --upgrade pip

Запуск сервера -  python manage.py runserver


I think the best way to use django is with virtualenv it's safe and you can install many apps in virtualenv which does not affect any outer space of the system vitualenv uses the default version of python which is same as in your system to install virtualenv

sudo pip install virtualenv
or for python3

sudo pip3 install virtualenv
and then in your dir

mkdir ~/newproject

cd ~/newproject

Now, create a virtual environment within the project directory by typing

virtualenv newenv
To install packages into the isolated environment, you must activate it by typing:

source newenv/bin/activate
now install here with

pip install django
You can verify the installation by typing:

django-admin --version
To leave your virtual environment, you need to issue the deactivate command from anywhere on the system:

deactivate
